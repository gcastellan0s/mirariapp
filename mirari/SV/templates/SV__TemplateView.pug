extends 'appwork/layout-without-navbar.html'
-load static
-load i18n

block styles
    {{block.super}}
    link(rel='stylesheet', href="{%static 'appwork-html/vendor/libs/bootstrap-material-datetimepicker/bootstrap-material-datetimepicker.css'%}")

block css
    {{block.super}}
    {%include 'css/SV__TemplateView.css'%}

block content
    {{block.super}}
    .row(style="background-color:rgba(103, 3, 3, 0.66);width:100%;margin:auto;position:fixed;z-index:1;" v-if="Offline")
        span(style="margin:auto;color:#fff")
            small NO HAY CONEXION A INTERNET
    div(v-if="$route.path === '/sellpoint'") 
        include SV__TemplateView__Sellpoint.pug
    div(v-else-if="$route.path === '/casher'") 
        include SV__TemplateView__Casher.pug
    div(v-else-if="$route.path === '/dashboard'") 
        include SV__TemplateView__Dashboard.pug
    div(v-else-if="$route.path === '/order'") 
        include SV__TemplateView__Order.pug
    div(v-else-if="$route.path === '/client'") 
        include SV__TemplateView__Client.pug

block js
    {{block.super}}
    script(src="{%static 'appwork-html/vendor/libs/moment/moment.js'%}")
    script(src="{%static 'appwork-html/vendor/libs/bootstrap-material-datetimepicker/bootstrap-material-datetimepicker.js'%}")

script.
    {%block constants%}
        {{block.super}}
        const router = new VueRouter({routes:[{ path:'/SV/sv/',component:{template:``}}]});
        const IVA = 0.16;
        const IEPS = 0.08;
        var PrivateSocket = null;
    {%endblock constants%}

    {%block router%}router,{%endblock router%}

    {%block data%}
        {{block.super}}
        Offline: false,
        ErrorText: null,
        Sellpoints: null,
        Sellpoint: null,
        Menus: null,
        Menu: {
            color: '#7b7b7b',
            id: 0,
        },
        ProductAttributes: null,
        Quantity: 'CANTIDAD',
        Price: 'PRECIO',
        Ticket: {
            products: [],
            key: null,
            format_time: null,
            format_date: null,
            barcode: '0',
            barcode2: '0',
            user: '{{request.user.id}}',
            username: null,
            cut: null,
            iva: 0,
            ieps: 0,
            total: 0,
            sellpoint: {},
            onAccount: 0,
            datetimeOfDelivery: null,
            destination: null,
            notes: null,
            clientID: 0,
            clientName: null,
            email: null,
            phone: null,
            rfc: null,
            ticketType: 'VENTA',
            ticketType2: 'GENERAL',
        },
        Tickets: [],
        Printers: [],
        Offers: [],
        ActivePrinter: {
            name: null,
        },
        LastTicketScan: null,
        Clients:[],
        Client: {
            id: 0,
            name: '',
            ide: '',
            clientProfile:{
                code: null,
            }
        },
        BarCode:'',
        ShowKeyboard: false,
        Keyboard: ['1','2','3','4','5','6','7','8','9','<','0','.'],
        TicketClient: null,
        LastClient: null,
        Exchange: null,
    {%endblock data%}

    {%block mounted%}
        {{block.super}}
        //GET STATES
        self.getStates(postFunctions=true)
        //SEND PENDINGS
        setInterval(function(){
            self.sendPendings()
        }, 60000);
        setInterval(function(){
            pendingTickets = self.Tickets.filter(function(ticket) {return (ticket.barcode == 0)})
            if(pendingTickets.length < 1) self.getStates()
        }, 300000);
        setInterval(function(){
            self.getOnlineStatus()
        }, 60000); //120000);
        //FOCUS BarCodeInput
        router.afterEach((to, from) => {
            if(to.path=='/casher'){
                if (self.Sellpoint.barcode){
                    setTimeout(function() {
                        self.$refs.BarCodeInput.focus()
                    }, 200)
                }
            }
        })
    {%endblock mounted%}

    {%block methods%}
        {{block.super}}
        getOnlineStatus: (()=> {
            Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=getOnlineStatus', {}, false, 3000).then((json)=>{
                if (self.Offline){
                    self.sendPendings()
                }
                self.Offline = false
            }).catch((error) => {
                self.Offline = true
            });
        }), 
        getStates: ((postFunctions=false, updateTickets=true, printInventory=false) => {
            if (postFunctions) Block('Actualizando configuracion...')
            Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=getStates',{},false,0).then(function(json){
                if (!postFunctions) Block('Actualizando configuracion...')
                self.Sellpoints = json.data.sellpoints
                self.Sellpoint = self.Sellpoints[0]
                if({{request.user.id}}==327) self.Sellpoint = self.Sellpoints[1] //////// REVISAR ESTO
                self.Menus = [{
                    name: 'FAVORITOS',
                    childrens: [],
                    color: '#000',
                    descendants: [],
                    get_descendant_count: 0,
                    id: 0,
                    is_child_node: false,
                    is_leaf_node: false,
                    is_root_node: true,
                }]
                json.data.menus.forEach(function(menu){
                    self.Menus.push(menu)
                })
                self.ProductAttributes = json.data.productAttributes
                self.Offers = json.data.offers
                if(updateTickets) self.Tickets = json.data.tickets
                if(postFunctions){
                    self.initializePublicSocket()
                    if(self.Menus) self.Menu = self.Menus[0]
                    if(!self.Sellpoint.printer) UnBlock()
                }
            }).catch((error) => {
                UnBlock()
            })
            .finally(() => {
                if (!postFunctions){
                    UnBlock()
                }
                if (printInventory){
                    self.printInventory();
                }
            });
        }),
        initializePublicSocket: (() => {
            PublicSocket = io.connect('http://50.18.229.242:8002');
            PublicSocket.emit('room', '{{request.user.organization.code}}');
            PublicSocket.on('Recibe_Event', (event, data) => {
                if (event == 'getStates') self.recibeGetStates(data);
                if (event == 'printerConection') self.recibePrinterConection(data);
                if (event == 'sendTicket') self.recibePrintTicket(data);
                if (event == 'scanTicket') self.recibeScanTicket(data);
                if (event == 'reloadSystem') self.recibeReloadSystem(data);
            });   
        }),
        addProduct: ((productattribute) => {
            if (self.Price == 'PRECIO') price = productattribute.price
            else price = self.Price
            if (self.Quantity == 'CANTIDAD') quantity = 1
            else quantity = parseFloat(self.Quantity)
            if (!productattribute.isOffer){
                productLine = self.Ticket.products.find(function(productLine) {
                    return productLine.id == productattribute.id && productLine.price == productattribute.price;
                });
                if (!productLine){
                    productLine = {
                        alias: productattribute.product.name,
                        productName: productattribute.product.name,
                        id: productattribute.id,
                        ieps: productattribute.ieps,
                        iva: productattribute.iva,
                        product: productattribute.product,
                        sellpoint: productattribute.sellpoint,
                        price: price,
                        offerprice: price,
                        quantity: quantity,
                        total: 0,
                        ivaTotal: 0,
                        iepsTotal: 0,
                        offers: [],
                    }
                    self.updateproductLineTotal(productLine)
                    self.Ticket.products.unshift(productLine)
                }
                else {
                    productLine.quantity += quantity
                    self.updateproductLineTotal(productLine)
                }
                self.addOffers(productLine)
            }
            else{
                if(productattribute.discountType=='totalPercent'){ /////Revisar la condicion aqui solo aplico el tipo de descuento
                    self.Ticket.products.forEach(function(product){
                        self.pushOffer(product, productattribute) 
                    });
                }
            }
            self.makeTicketTotal()
            self.Quantity = 'CANTIDAD'
            self.Price = 'PRECIO'
            return true
        }),
        addOffers: ((productLine) => {
            self.Offers.filter(function(offer){return offer.mySellpoints.includes(self.Sellpoint.id)&&offer.myConditionProducts.includes(productLine.product.id)})
            .forEach(function(element){
                apply = true
                if(element.clients.length>0){if(!element.clients.includes(self.Client.id))apply = false}
                if(apply){
                    productLinesConditionProducts = self.Ticket.products.filter(function(productLine){
                        return element.myConditionProducts.includes(productLine.product.id)
                    });
                    productLinesDiscountProducts = self.Ticket.products.filter(function(productLine){
                        return element.myDiscountProducts.includes(productLine.product.id)
                    });
                    if(element.conditionType == 'productQuantity') self.offerProductQuantity(element, productLinesConditionProducts, productLinesDiscountProducts)
                }
            });
        }),
        offerProductQuantity: ((offer, productLinesConditionProducts, productLinesDiscountProducts) => {
            ProductQuantity = 0
            apply = false
            productLinesConditionProducts.forEach(function(productLine){
                ProductQuantity += productLine.quantity
            });
            if(ProductQuantity >= offer.conditionValue) apply = true
            self.applyOrRemoveOffer(offer, productLinesConditionProducts, productLinesDiscountProducts, apply)
        }),
        applyOrRemoveOffer: ((offer, productLinesConditionProducts, prodproccessinguctLinesDiscountProducts, apply) => {
            productLinesDiscountProducts.forEach(function(productLine){
                if (apply == false){if(productLine.offers.length) productLine.offers = productLine.offers.filter(item => item !== offer)}
                else{
                    if(productLine.offers.length){if(!(productLine.offers.includes(offer))){productLine.offers.push(offer)}}
                    else self.pushOffer(productLine, offer) 
                }
            });
        }),
        pushOffer: ((product, offer) => {
            if (product.offers.length < 1){
                product.offers.push(offer)
            }
        }),
        makeTicketTotal: (() => { ////// SE APLICAN LAS OFERTAS /////
            self.Ticket.total = 0
            self.Ticket.iva = 0
            self.Ticket.ieps = 0
            self.Ticket.products.forEach(function(productLine){
                self.Ticket.total += productLine.total
                self.Ticket.iva += productLine.ivaTotal
                self.Ticket.ieps += productLine.iepsTotal
                productLine.offers.forEach(function(offer){
                    if(offer.discountType == 'productValue'){
                        discountValue = 100 - (offer.discountValue * 100 / productLine.price)
                        self.Ticket.total -= (productLine.total*(discountValue*.01))
                        self.Ticket.iva -= (productLine.ivaTotal*(discountValue*.01))
                        self.Ticket.ieps -= (productLine.iepsTotal*(discountValue*.01))
                        productLine.offerprice = productLine.price - (productLine.price*(discountValue*.01))
                    }
                    else if(offer.discountType == 'productPercent' || offer.discountType == 'totalPercent'){
                        self.Ticket.total -= (productLine.total*(offer.discountValue*.01))
                        self.Ticket.iva -= (productLine.ivaTotal*(offer.discountValue*.01))
                        self.Ticket.ieps -= (productLine.iepsTotal*(offer.discountValue*.01))
                        productLine.offerprice = productLine.price - (productLine.price*(offer.discountValue*.01))
                    }
                });
            });
        }),
        updateproductLineTotal: ((productLine) => {
            productLine.total = productLine.price * productLine.quantity
            if (productLine.iva) productLine.ivaTotal = (productLine.total / (IVA + 1) * IVA)
            if (productLine.ieps) productLine.iepsTotal = (productLine.total / (IEPS + 1) * IEPS)
            return productLine
        }),
        getBarCode:((print=true, send=true, init=true) => {
            Block('Generando...')
            self.Ticket.key = self.randomChars(12, 'aplha_numbers')
            self.Ticket.format_time = String(moment().format('hh:mm A'))
            self.Ticket.format_date = String(moment().format('DD/MM/YYYY'))
            self.Ticket.status = 'COBRADO'
            if (self.Sellpoint.have_casher) self.Ticket.status = 'PENDIENTE'
            self.Ticket.sellpoint.id = self.Sellpoint.id
            self.Ticket.sellpoint.name = self.Sellpoint.name
            self.Ticket.sellpoint.color = self.Sellpoint.color
            self.Ticket.username = '{{request.user.visible_username}}'
            Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=getBarCode',{ticket: JSON.stringify(self.Ticket)},errorDialog=false,timeout=3000)
            .then((json) => {
                Block('Imprimiendo...')
                self.Ticket.barcode = json.data.ticket.barcode
                self.Ticket.barcode2 = json.data.ticket.barcode2
                self.Ticket.cut = json.data.ticket.cut
            }).catch((error) => {
            }).finally(() => { 
                if (print) self.printTicket(self.Ticket)
                if (self.Sellpoint.haveExchange){
                    self.Exchange = self.Ticket
                }
                newTicket = self.Tickets.find(function(ticket){return ticket.key == self.Ticket.key;});
                if(!newTicket) self.Tickets.unshift(self.Ticket)
                if (send) {
                    if(self.Ticket.ticketType=='VENTA' || self.Ticket.ticketType=='PAGO' || self.Ticket.ticketType=='REMISION' ) self.emmitSendTicket(self.Ticket)
                }
                if (init) self.initTicket()
                if (self.Ticket.ticketType == 'GASTO') {
                    self.$router.push({path:'dashboard'})
                }
                else if (self.includes(self.Sellpoint.vendors, {{request.user.id}})){
                    self.$router.push({path:'sellpoint', query:{sellpointMode:'sellpoint'}})
                }
                else if (self.includes(self.Sellpoint.orders, {{request.user.id}})){
                    self.resetOrder()
                    self.$router.push({path:'order', query:{orderMode:'selectOrder'}})
                }
                else if (self.includes(self.Sellpoint.cashers, {{request.user.id}})) {
                    self.$router.push('/casher');
                }
                UnBlock()
            });
        }),
        sendPendings: (() => {
            pendingTickets = self.Tickets.filter(function(ticket) {return (ticket.barcode == 0)})
            pendingTickets.forEach(ticket => {
                Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=getBarCode',{ticket: JSON.stringify(ticket)},errorDialog=false,timeout=3000)
                .then((json) => {
                    ticket.barcode = json.data.ticket.barcode
                    ticket.cut = json.data.ticket.cut
                }).catch((error) => {}).finally(()=>{});
            });
        }),
        printTicket: ((ticket) => { 
            if (PrivateSocket){
                ticketFormat = []
                if(self.Ticket.ticketType=='VENTA'){
                    ticketFormat.push(["times",[self.Sellpoint.number_tickets]])
                    event = 'Print'
                }  
                else if(self.Ticket.ticketType=='REMISION'){
                    ticketFormat.push(["times",[3]])
                    event = 'Print'
                    if(self.Ticket.ticketType2=='CENAS'){
                        event = 'PrintCenas'
                    }
                    if(self.Ticket.ticketType2=='COMIDA'){
                        event = 'PrintComida'
                    }
                    if(self.Ticket.ticketType2=='BOCADILLOS'){
                        event = 'PrintBocadillos'
                    }
                    if(self.Ticket.ticketType2=='PAN'){
                        event = 'PrintPan'
                    }
                    if(self.Ticket.ticketType2=='HORNEADO'){
                        event = 'PrintHorneado'
                    }
                }
                else if(self.Ticket.ticketType=='PAGO'){
                    ticketFormat.push(["times",[3]])
                    event = 'Print'
                }
                else if(self.Ticket.ticketType=='DEVOLUCION'){
                    ticketFormat.push(["times",[3]])
                    event = 'Print'
                } 
                ticketFormat.push(["set",["CT", "A", "bu", 2, 2]])
                ticketFormat.push(["image"])
                if(self.Ticket.ticketType=='REMISION'){
                    ticketFormat.push(["text", self.Ticket.barcode2 + ' // ' + self.Ticket.clientID])
                    ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                    ticketFormat.push(["text", '------------------------------------------'])
                    ticketFormat.push(["set",["CT", "A", "bu", 2, 2]])
                }
                if (self.Ticket.onAccount){ticketFormat.push(["text", '$' + self.$options.filters.formatPrice(String(self.Ticket.onAccount))])}
                else {ticketFormat.push(["text", '$' + self.$options.filters.formatPrice(String(self.Ticket.total))])}
                ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                if(self.Sellpoint.header_line_black_1) ticketFormat.push(["text", self.Sellpoint.header_line_black_1])
                if(self.Sellpoint.header_line_black_2) ticketFormat.push(["text", self.Sellpoint.header_line_black_2])
                ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                if(self.Sellpoint.header_line_1) ticketFormat.push(["text", self.Sellpoint.header_line_1])
                if(self.Sellpoint.header_line_2) ticketFormat.push(["text", self.Sellpoint.header_line_2])
                ticketFormat.push(["text", self.Ticket.format_date + ' ' + self.Ticket.format_time])
                if (self.Ticket.clientID) ticketFormat.push(["text", '------------------------------------------'])
                if (self.Ticket.clientID) ticketFormat.push(["text", 'ID Cliente: ' + self.Ticket.clientID])
                if (self.Ticket.clientName) ticketFormat.push(["text", 'Nombre: ' + self.Ticket.clientName.toUpperCase()])
                if (self.Ticket.email) ticketFormat.push(["text", 'Email: ' + self.Ticket.email])
                if (self.Ticket.phone) ticketFormat.push(["text", 'Teléfono: ' + self.Ticket.phone])
                if (self.Ticket.rfc) ticketFormat.push(["text", 'RFC: ' + self.Ticket.rfc])
                if (self.Ticket.datetimeOfDelivery) ticketFormat.push(["text", 'Fecha de entrega: ' + self.Ticket.datetimeOfDelivery])
                if (self.Ticket.destination) ticketFormat.push(["text", 'Destino: ' + self.Ticket.destination])
                if (self.Ticket.notes) ticketFormat.push(["text", 'Notas: ' + self.Ticket.notes.toUpperCase()])
                ticketFormat.push(["text", '------------------------------------------'])
                self.Ticket.products.forEach(function(product){
                    if(self.Ticket.ticketType=='REMISION') ticketFormat.push(["set",["LT", "A", "bu", 1, 2]])
                    else ticketFormat.push(["set",["LT", "A", "bu", 1, 1]])
                    ticketFormat.push(["text", String(product.quantity) + ' ' + product.productName + ' ' + '$' + self.$options.filters.formatPrice(String(product.total))])
                    product.offers.forEach(function(offer){
                        ticketFormat.push(["set",["RT", "A", "bu", 1, 1]])
                        ticketFormat.push(["text", offer.name + ' $' + self.$options.filters.formatPrice(String(product.offerprice))])
                    });
                });
                ticketFormat.push(["set",["RT", "A", "bu", 1, 1]])
                ticketFormat.push(["text", 'IVA: $' + self.$options.filters.formatPrice(String(self.Ticket.iva))])
                ticketFormat.push(["text", 'IEPS: $' + self.$options.filters.formatPrice(String(self.Ticket.ieps))])
                if (self.Ticket.onAccount){ticketFormat.push(["text", 'A CUENTA: $' + self.$options.filters.formatPrice(String(self.Ticket.onAccount))])}
                ticketFormat.push(["text", 'TOTAL: $' + self.$options.filters.formatPrice(String(self.Ticket.total))])
                ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                ticketFormat.push(["text", self.Ticket.barcode + ' :: ' + self.Ticket.key])
                if(self.Ticket.status=='PENDIENTE') ticketFormat.push(["qr",self.Ticket.key])
                //if(self.Ticket.ticketType=='REMISION'){
                    //ticketFormat.push(["text", self.Ticket.key])
                //}
                else ticketFormat.push(["cut"])
                PrivateSocket.emit('Send_Event','{{request.user.organization.code}}',event, ticketFormat)
            }
        }),
        initTicket: (() => {
            self.Ticket = {
                products: [],
                key: null,
                format_time: null,
                format_date: null,
                barcode: '0',
                barcode2: '0',
                user: '{{request.user.id}}',
                username: null,
                cut: null,
                iva: 0,
                ieps: 0,
                total: 0,
                sellpoint: {},
                onAccount: 0,
                datetimeOfDelivery: null,
                destination: null,
                notes: null,
                clientID: 0,
                clientName: null,
                email: null,
                phone: null,
                rfc: null,
                ticketType: 'VENTA',
                ticketType2: 'GENERAL',
            }
        }),
        makeInventory: (() => {
            self.getStates(printInventory=true)
        }),
        printInventory: (() => {
            Block(text="Haciendo inventario...");
            if (PrivateSocket){
                ticketFormat = []
                ticketFormat.push(["times",[1]])
                ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                ticketFormat.push(["text", self.Sellpoint.name])
                ticketFormat.push(["text", 'INVENTARIO'])    
                ticketFormat.push(["text", moment().format('MMMM D, h:mm:ss a')])
                ticketFormat.push(["set",["CT", "A", "", 1, 1]])
                self.ProductAttributes.forEach(function(product) {
                    ticketFormat.push(["text", String(product.quantity) + ' ' + product.product.name + ' ' + product.product.description])
                });
                ticketFormat.push(["cut"])
                PrivateSocket.emit('Send_Event','{{request.user.organization.code}}','Print', ticketFormat)
            }
            UnBlock();
        }),
        makeCut: ((cutID='Actual') => {
            if(self.Offline) Swal.fire('Ooops!','No se puede hacer corte sin conexión a internet','error')
            else{ 
                Block(text="Haciendo corte...");
                Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=makeCut', {
                    sellpoint: JSON.stringify(self.Sellpoint),
                    cutID:cutID,
                },errorDialog=false, timeout=0)
                .then((json) => {
                    if (PrivateSocket){
                        ticketFormat = []
                        ticketFormat.push(["times",[1]])
                        ticketFormat.push(["set",["CT", "A", "bu", 2, 2]])
                        ticketFormat.push(["text", 'TOTAL: ' + json.data.cut.getTotalDetail['__ALL']['COBRADO']['MXN']])
                        ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                        ticketFormat.push(["text", 'FOLIO: ' + String(json.data.cut.serial)])
                        ticketFormat.push(["text", moment(json.data.cut.final_time).format('MMMM D, h:mm:ss a')])
                        ticketFormat.push(["text", json.data.cut.SellpointDetail.name])
                        ticketFormat.push(["text", '------------------------------------------'])
                        if(json.data.cut.SellpointDetail.header_line_black_1) ticketFormat.push(["text", json.data.cut.SellpointDetail.header_line_black_1])
                        if(json.data.cut.SellpointDetail.header_line_black_2) ticketFormat.push(["text", json.data.cut.SellpointDetail.header_line_black_2])
                        ticketFormat.push(["set",["CT", "A", "", 1, 1]])
                        if(json.data.cut.SellpointDetail.header_line_1) ticketFormat.push(["text", json.data.cut.SellpointDetail.header_line_1])
                        if(json.data.cut.SellpointDetail.header_line_2) ticketFormat.push(["text", json.data.cut.SellpointDetail.header_line_2])
                        if(json.data.cut.SellpointDetail.footer_line_1) ticketFormat.push(["text", json.data.cut.SellpointDetail.footer_line_1])
                        ticketFormat.push(["text", '# tickets faltantes: ' + json.data.cut.getLens['__ALL']['PENDIENTE']])
                        ticketFormat.push(["text", '# tickets cancelados: ' + json.data.cut.getLens['__ALL']['CANCELADO']])
                        ticketFormat.push(["text", '# de clientes: ' + json.data.cut.getLens['__ALL']['COBRADO']])
                        ticketFormat.push(["text", '1er venta: ' + moment(json.data.cut.initial_time).format('MMMM D, h:mm:ss a')])
                        for (const propProductsDetail in json.data.cut.getProductsDetail){
                            ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                            ticketFormat.push(["text", '------------------------------------------'])
                            if (propProductsDetail=='__ALL') ticketFormat.push(["text", 'VENTA TOTAL'])
                            else ticketFormat.push(["text", propProductsDetail])
                            ticketFormat.push(["text", '------------------------------------------'])
                            if (json.data.cut.getTotalDetail[propProductsDetail]['COBRADO']['NUMBER'] != 0){
                                json.data.cut.getProductsDetail[propProductsDetail]['COBRADO'].forEach(function(product){
                                    ticketFormat.push(["text", String(product.quantity) + ' ' + product.productName + ' de ' + product.getPrice['MXN'] + ' --> ' + product.getTotal['MXN']])
                                    for (const propOffer in product.offers){
                                        ticketFormat.push(["set",["RT", "A", "", 1, 1]])
                                        ticketFormat.push(["text", String(product.offers[propOffer].quantity) + ' ' + product.offers[propOffer].offerName])
                                    }
                                    if (Object.keys(product.offers).length > 0){
                                        ticketFormat.push(["text", product.getOffersTotal['MXN']])
                                        ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                                    }
                                })
                                ticketFormat.push(["set",["RT", "A", "bu", 1, 1]])
                                ticketFormat.push(["text", 'TOTAL COBRADO: ' + json.data.cut.getTotalDetail[propProductsDetail]['COBRADO']['MXN']])
                                ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                            }
                            if (json.data.cut.getTotalDetail[propProductsDetail]['PENDIENTE']['NUMBER'] != 0){
                                json.data.cut.getProductsDetail[propProductsDetail]['PENDIENTE'].forEach(function(product){
                                    ticketFormat.push(["text", String(product.quantity) + ' ' + product.productName + ' de ' + product.getPrice['MXN'] + ' --> ' + product.getTotal['MXN']])
                                    for (const propOffer in product.offers){
                                        ticketFormat.push(["set",["RT", "A", "", 1, 1]])
                                        ticketFormat.push(["text", String(product.offers[propOffer].quantity) + ' ' + product.offers[propOffer].offerName])
                                    }
                                    if (Object.keys(product.offers).length > 0){
                                        ticketFormat.push(["text", product.getOffersTotal['MXN']])
                                        ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                                    }
                                });
                                ticketFormat.push(["set",["RT", "A", "bu", 1, 1]])
                                ticketFormat.push(["text", 'TOTAL FALTANTE: ' + json.data.cut.getTotalDetail[propProductsDetail]['PENDIENTE']['MXN']])
                                ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                            }
                            if (json.data.cut.getTotalDetail[propProductsDetail]['CANCELADO']['NUMBER'] != 0){
                                json.data.cut.getProductsDetail[propProductsDetail]['CANCELADO'].forEach(function(product){
                                    ticketFormat.push(["text", String(product.quantity) + ' ' + product.productName + ' de ' + product.getPrice['MXN'] + ' --> ' + product.getTotal['MXN']])
                                    for (const propOffer in product.offers){
                                        ticketFormat.push(["set",["RT", "A", "", 1, 1]])
                                        ticketFormat.push(["text", String(product.offers[propOffer].quantity) + ' ' + product.offers[propOffer].offerName])
                                    }
                                    if (Object.keys(product.offers).length > 0){
                                        ticketFormat.push(["text", product.getOffersTotal['MXN']])
                                        ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                                    }
                                });
                                ticketFormat.push(["set",["RT", "A", "bu", 1, 1]])
                                ticketFormat.push(["text", 'TOTAL CANCELADO: ' + json.data.cut.getTotalDetail[propProductsDetail]['CANCELADO']['MXN']])
                                ticketFormat.push(["set",["CT", "A", "bu", 1, 1]])
                            }
                        }
                        ticketFormat.push(["text", '------------------------------------------'])
                        ticketFormat.push(["set",["RT", "A", "bu", 1, 1]])
                        ticketFormat.push(["text", 'TOTAL FALTANTE: ' + json.data.cut.getTotalDetail['__ALL']['PENDIENTE']['MXN']])
                        ticketFormat.push(["text", 'TOTAL CANCELADO: ' + json.data.cut.getTotalDetail['__ALL']['CANCELADO']['MXN']])
                        ticketFormat.push(["text", '-------------------------'])
                        ticketFormat.push(["text", 'IVA: ' + json.data.cut.getIvaDetail['__ALL']['COBRADO']['MXN']])
                        ticketFormat.push(["text", 'IEPS: ' + json.data.cut.getIepsDetail['__ALL']['COBRADO']['MXN']])
                        ticketFormat.push(["text", 'TOTAL: ' + json.data.cut.getTotalDetail['__ALL']['COBRADO']['MXN']])
                        ticketFormat.push(["text", '-------------------------'])
                        ticketFormat.push(["text", 'TOTAL + FALTANTE: ' + json.data.cut.getTotalDetail['__ALL']['TOTAL']['MXN']])
                        ticketFormat.push(["cut"])
                        PrivateSocket.emit('Send_Event','{{request.user.organization.code}}','Print', ticketFormat)
                    }
                })
                .catch((error) => {
                    UnBlock()
                    Swal.fire('Ooops!','{% trans "No hay conexión con el servidor, intente de nuevo mas tarde."%}','error')
                })
                .finally(() => {
                    UnBlock()
                    if(cutID) self.emmitGetStates()
                });
            }
        }),
        getCuts: ((init=0,final=0) => {
            Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=getRangeCuts', {organization:'{{request.user.organization.code}}', init:init,final:final}, errorDialog=false, timeout=10000)
            .then((json) => {
                json.data.cuts.forEach(function(cut, index) {
                    setTimeout(function() {
                        self.makeCut(cutID=cut.id)
                    }, 5000 * index)
                });
            })
            .catch((error) => {
                Swal.fire('Ooops!','{% trans "No hay conexión con el servidor, intente de nuevo mas tarde."%}','error')
            })
            .finally(() => {
            });
        }),
        getClient: ((client) => {
            if(client.id){
                Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=getClient', client)
                .then(function(json){
                    self.Client = json.data.client
                    self.LastClient = json.data.client
                }).catch((error) => {});
            }
            else{
                self.Client = client
            }
            self.initTicket()
            self.$router.push({path:'order', query:{orderMode:'selectOrder'}})
        }),
        getTicket: ((ticketID) => {
            Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=getTicket', {'ticket': ticketID})
            .then(function(json){
                self.TicketClient=json.data.ticket
                $("#modalTicketClient").modal('show')
            }).catch((error) => {});
        }),
        resetOrder: ((resetTicket=false)=>{
            self.Clients = []
            self.Client = {
                id: 0,
                name: '',
                ide: '',
                clientProfile:{
                    code: null,
                },
            }
            if(resetTicket) self.initTicket()
        }),
        getDataOrder: (() => {
            if(self.Client.uid){self.Ticket.clientID = self.Client.uid}
            else{self.Ticket.clientID = self.randomChars(4,'aplha_numbers')}
            if(self.Client.clientProfile.code == 'PUBLICO GENERAL' || self.Client.clientProfile.code == null) self.Ticket.onAccount = self.Ticket.total
            self.Ticket.clientName = self.Client.name
            self.Ticket.email = self.Client.email
            self.Ticket.phone = self.Client.phone
            self.Ticket.rfc = self.Client.rfc
            self.$router.push({path:'order',query:{orderMode:'finishOrder'}})
        }),
        deleteProductLine:((productLine) => {
            Swal.fire({
                title: productLine.productName,
                text: "Estas segur@ de eliminar este producto?",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#909090',
                cancelButtonText: 'Cancelar',
                confirmButtonText: 'SI, Eiminar!'
            }).then((result) => {
                if (result.value) {
                    self.Ticket.products = self.Ticket.products.filter(function(product) { 
                        return product !== productLine
                    })
                    self.makeTicketTotal()
                }
            })
        }),
        getDataExpenses:(() => {
            self.initTicket()
            self.resetOrder()
            self.Ticket.ticketType='GASTO';
            self.$router.push({path:'order',query:{orderMode:'finishOrder'}})
        }),
        ifShowProduct: ((product) => {
            currentHour = moment(currentTime).format("HH")
            return true
        }),
        onSubmit:((BarCode) => {
            Ax('post', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=barcodeScanner',{barcode:self.BarCode, code:'{{request.user.organization.code}}'}).then(function(json){
                PublicSocket.emit('Send_Event','{{request.user.organization.code}}','scanTicket', json.data.ticket)
            }).catch((error) => {
            })
            .finally(() => {
                self.BarCode = ''
            });
        }),
        activeProduct:((productattribute) => {
            ifActive = productattribute.product.menu.filter((menu) => {
                isDescendant = self.Menu.descendants.filter((descendant) => {
                    return descendant.id == menu
                })
                return menu == self.Menu.id || isDescendant.length>0
            })
            return ifActive.length>0 && productattribute.sellpoint==self.Sellpoint.id
        }),
        /////SYSTEM
        reloadSystem: ((text='Espere un momento...') => {
            Block(text)
            window.location.replace("/login");
        }),
        /////SOCKETIO
        recibePrinterConection: ((data) => {
            if(self.Sellpoint.printer == data.name){
                if (data.name != self.ActivePrinter.name || data.url != self.ActivePrinter.url){
                    if (PrivateSocket) PrivateSocket.close()
                    self.ActivePrinter = data
                    PrivateSocket = io.connect(self.ActivePrinter.url);
                    UnBlock()
                }
            }
        }),
        recibePrintTicket: ((data) => {
            haveSellpoint = self.Sellpoints.find(function(sellpoint){return sellpoint.id == data.sellpoint.id})
            if(haveSellpoint){
                newTicket = self.Tickets.find(function(ticket){return ticket.key == data.key})
                if(!newTicket) self.Tickets.unshift(data)
            }
        }),
        recibeScanTicket: ((data) => {
            updateTicket = self.Tickets.find(function(ticket) {
                return ticket.key == data.key;
            });
            if (updateTicket){
                updateTicket.status = data.status
                updateTicket.barcode = data.barcode
                updateTicket.cut = data.cut
                self.LastTicketScan = data.barcode
            }
        }),
        recibeReloadSystem: ((data) => {
            self.reloadSystem()
        }),
        recibeGetStates: ((data) => {
            self.getStates()
        }),
        /////PLUGINS
        emmitReloadSystem: (() => {
            PublicSocket.emit('Send_Event', '{{request.user.organization.code}}', 'reloadSystem', {})
        }),
        emmitGetStates: (() => {
            PublicSocket.emit('Send_Event', '{{request.user.organization.code}}', 'getStates', {})
        }),
        emmitSendTicket: ((ticket) => {
            PublicSocket.emit('Send_Event', '{{request.user.organization.code}}', 'sendTicket', ticket)
        }),
        keyboard: ((value) => {
            if (self.Quantity == 'CANTIDAD') self.Quantity = ''
            if (value == '.'){
                if (self.Quantity.indexOf(".") !=-1) return 0
            } 
            if (value == '<'){
                self.Quantity = self.Quantity.substring(0, self.Quantity.length - 1)
                if (self.Quantity.length == 0) self.Quantity = 'CANTIDAD'
                return 0
            }
            self.Quantity += value
        }),
        randomChars: function(length, type="aplha_numbers") { 
            text = ""
            aplha_numbers = "abcdefghijklmnopqrstuvwxyz0123456789";
            numbers = "0123456789";
            if (type=='letters_numbers') possible = letters_numbers
            else if (type=='aplha_numbers') possible = aplha_numbers
            else possible = numbers
            for (var i = 0; i < length; i++) text += possible.charAt(Math.floor(Math.random() * possible.length))
            return text
        },
        includes: ((object, element) => {
            if (!object) return false
            return object.includes(element)
        }),
        getPhoto: ((productattribute) => {
            return productattribute.product.photo
        }),
    {%endblock methods%}

    {%block filters%}
        {{block.super}}
        ticketsTotal: ((statusTicket) => {
            total = 0
            pendingTickets = self.Tickets.filter(function(ticket) {return (ticket.status == statusTicket)})
            pendingTickets.forEach(ticket => {
                total += ticket.total
            });
            return total
        }),
        formatTDate: ((value) => {
            moment.locale('es');
            return String(moment(value).format('DD/MM/YYYY h:mm A'))
        }),
        
    {%endblock filters%}

    {%block watch%}
        {{block.super}}
        'Client.name': function (newData, oldData) {
            if(newData){
                if(newData.length > 2){
                    Ax('get', '{%url 'SV:Sellpoint__ApiView' 'SV' 'set_sellpoint' 'Sellpoint'%}?api=getClients&query='+newData)
                    .then(function(json){
                        self.Clients = json.data.clients
                    }).catch((error) => {});
                }
            }else{self.resetOrder()}
        }
    {%endblock watch%}

    {%block vuecomponents%}
        {{block.super}}
        Vue.component('componentMenu', {
            delimiters: ['${', '}'],
            props:{
                menu: Object,
                menus: Object,
            },
            template: `
                <li class="sidenav-item py-0">
                    <a class="sidenav-link text-right d-flex justify-content-end py-4 px-1 text-dark" href="javascript:void(0)" v-if="menu.name" v-on:click="self.Menu=menu" :class="[{'sidenav-toggle px-3':menu.childrens.length>0}, menu==self.Menu?'bg-light':'']">
                        <strong class="h4 mb-0" :style="{color:menu.color}" v-html="menu.name.toString().charAt(0).toUpperCase()"></strong>
                        <small v-html="menu.name.toString().slice(1)"></small>
                    </a>
                    <ul class="sidenav-menu">
                        <component-menu v-for="children in menu.childrens" :menu="children" :menus="menus"/>
                    </ul>
                </li>
            `,
        });
        {%include 'js/SV__Component__DatePicker.js'%}
    {%endblock vuecomponents%}
.